---
- hosts: all
  become: true
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - gnupg2

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
      state: present

  - name: Install Docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - containerd.io
      - docker-ce
      - docker-ce-cli
    notify:
      - docker status

  - name: Add root user to docker group
    user:
      name: root
      group: docker

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10" --pod-network-cidr=172.16.0.0/16

  - name: Create kube directory
    file:
      path: /root/.kube
      state: directory

  - name: Setup kubeconfig for root user
    ansible.builtin.copy:
      remote_src: yes
      src: /etc/kubernetes/admin.conf
      dest: /root/.kube/config
      owner: root
      group: root

  - name: Disable IP tables
    shell: |
      echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
      echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
      sysctl -p

  # Install Weave as CNI
  - name: Install Weave CNI
    shell: |
      kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

  # Install K8S Dashboard
  - name: Install K8S dashboard
    shell: |
      kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended.yaml

  # Install NGINX Ingress Controller
#  - name: Install NGINX Ingress Controller
#    shell: |
#      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/deploy.yaml

  # ------------------------------ #
  # Policy-as-Code (PaC) solutions #
  # ------------------------------ #
  # Install OPA Gatekeeper
#  - name: Install OPA Gatekeeper
#    shell: |
#      kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml

  # Install Kyverno
#  - name: Install Kyverno
#    shell: |
#      kubectl create -f https://raw.githubusercontent.com/kyverno/kyverno/main/definitions/release/install.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: false
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  - name: Autocomplete and useful alias
    shell: |
      echo "source <(kubectl completion bash)" >> /root/.bashrc
      echo "alias k=kubectl" >> /root/.bashrc
      echo "alias kg='kubectl get'" >> /root/.bashrc
      echo "alias kd='kubectl describe'" >> /root/.bashrc
      echo "complete -F __start_kubectl k" >> /root/.bashrc
      echo "export do='--dry-run=client -o yaml'" >> /root/.bashrc

  - name: Configure VIM minimaly
    shell: |
      echo "set expandtab" > /root/.vimrc
      echo "set tabstop=2" >> /root/.vimrc
      echo "set sw=2" >> /root/.vimrc

  - name: Install tools for debugging/troubleshooting
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - jq
      - etcd-client
      - binutils

  - name: Install kube-bench for CIS benchmarks
    shell: |
      docker run --rm -v /root:/host aquasec/kube-bench install

  - name: Install Trivy as vulnerability scanner
    shell: |
      apt-get install wget apt-transport-https gnupg lsb-release
      wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | tee -a /etc/apt/sources.list.d/trivy.list
      apt-get update
      apt-get install -y trivy

  - name: Download Helm installation script
    get_url:
      url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      dest: /opt/get_helm.sh
      mode: '700'

  - name: Install Helm for playing around
    command: bash /opt/get_helm.sh

  # Fix for vagrant environments
  - name: Ensure kubelet configs are correct
    synchronize:
      src: ../kubelet/cks-master.conf
      dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

  - name: Reload daemon
    command: systemctl daemon-reload

  - name: Reload kubelet
    command: systemctl restart kubelet

  handlers:
  - name: docker status
    service: name=docker state=started
